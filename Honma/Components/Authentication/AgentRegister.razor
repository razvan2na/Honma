@inherits FluxorComponent

<MudStack Spacing="4">
    <MudText Typo="Typo.h5">Register new agent</MudText>

    <MudStack Spacing="2">
        <MudTextField Adornment="Adornment.End"
                      AdornmentIcon="@HonmaIcons.Agent"
                      @bind-Value="_agentSymbol"
                      Counter="14"
                      HelperText="Unique name used to represent your agent"
                      Immediate
                      Label="Symbol"
                      MaxLength="14"
                      Validation="@((string symbol) => ValidateAgentSymbol(symbol))"
                      Variant="Variant.Filled">
        </MudTextField>

        <MudSelect Adornment="Adornment.End"
                   AdornmentIcon="@HonmaIcons.Faction"
                   AnchorOrigin="Origin.BottomCenter"
                   @bind-Value="_selectedFaction"
                   HelperText="Determines your starting location"
                   Label="Faction"
                   T="Faction?"
                   Variant="Variant.Filled">
            @foreach (var faction in State.Value.Factions.Where(faction => faction.IsRecruiting))
            {
                <MudSelectItem T="Faction?"
                               Value="faction">
                    <MudStack AlignItems="AlignItems.Center"
                              Class="mr-2"
                              Justify="Justify.SpaceBetween"
                              Row>
                        <MudText>@faction.Name</MudText>
                        <MudText Color="Color.Primary">[@faction.Symbol]</MudText>
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>
    </MudStack>

    <MudButton Class="rounded-lg"
               Color="Color.Primary"
               Disabled="@(!CanRegister)"
               DropShadow="false"
               OnClick="Register"
               Size="Size.Large"
               StartIcon="@HonmaIcons.SignIn"
               Variant="Variant.Filled">
        Register
    </MudButton>
</MudStack>

@code {

    [Inject] private IState<FactionState> State { get; set; } = null!;

    [Inject] private IDispatcher Dispatcher { get; set; } = null!;

    private string? _agentSymbol;
    private Faction? _selectedFaction;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new FactionsLoad());
    }

    private void Register()
    {
        if (CanRegister)
        {
            Dispatcher.Dispatch(
                new UserAgentRegister(
                    _agentSymbol!,
                    _selectedFaction?.Symbol ?? throw new InvalidOperationException()
                )
            );
        }
    }

    private bool CanRegister => !string.IsNullOrWhiteSpace(_agentSymbol) &&
                                _agentSymbol.Length is >= 3 and <= 14 &&
                                _selectedFaction is not null;

    private IEnumerable<string> ValidateAgentSymbol(string? symbol)
    {
        switch (symbol?.Length)
        {
            case < 3:
                yield return "Min 3 characters";
                break;
            case > 14:
                yield return "Max 14 characters";
                break;
        }
    }

}