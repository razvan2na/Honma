@inherits FluxorComponent

<MudAppBar Class="honma-appbar ml-2 rounded-b-lg"
           Dense
           Elevation="0"
           Gutters="false">
    <div onclick="@(() => NavigationManager.NavigateTo(Routes.Home))">
        <MudStack AlignItems="AlignItems.Center"
                  Class="cursor-pointer ml-4"
                  Row
                  Spacing="2">
            <MudIcon Icon="@HonmaIcons.Path"/>
            <MudText Typo="Typo.h6">Honma</MudText>
            <MudChip Color="Color.Warning"
                     Size="Size.Small"
                     T="string"
                     Variant="Variant.Text">
                ALPHA
            </MudChip>
        </MudStack>
    </div>

    <MudSpacer/>

    <AuthorizeView>
        <NotAuthorized>
            <MudIconButton Class="mr-2"
                           Color="Color.Inherit"
                           Href="@Routes.Login"
                           Icon="@HonmaIcons.SignIn"/>
        </NotAuthorized>
        <Authorized>
            @if (State.Value.Agent is not null)
            {
                var agent = State.Value.Agent.Value;

                <CurrencyDisplay Amount="@agent.Credits"/>
                <MudMenu AnchorOrigin="Origin.BottomRight"
                         Class="ml-4 mr-4"
                         Color="Color.Inherit"
                         Dense
                         Label="@agent.Symbol"
                         Size="Size.Large"
                         StartIcon="@HonmaIcons.Agent"
                         TransformOrigin="Origin.TopRight"
                         Variant="Variant.Text">
                    <MudMenuItem OnClick="@(() => CopyTokenToClipboard(agent.Token))">
                        Copy Token to Clipboard
                    </MudMenuItem>
                    <MudMenuItem OnClick="@LogOut">Log Out</MudMenuItem>
                </MudMenu>
            }
        </Authorized>
    </AuthorizeView>
</MudAppBar>

@code {

    [CascadingParameter(Name = CascadingValues.RouteData)]
    private RouteData? RouteData { get; set; }

    [Inject] private IState<UserAgentState> State { get; set; } = null!;

    [Inject] private IDispatcher Dispatcher { get; set; } = null!;

    [Inject] private ClipboardService ClipboardService { get; set; } = null!;

    [Inject] private ISnackbar Snackbar { get; set; } = null!;

    [Inject] public required NavigationManager NavigationManager { get; set; }

    private List<BreadcrumbItem>? _breadcrumbs;

    protected override void OnParametersSet()
    {
        _breadcrumbs = RouteData?.BuildBreadcrumbs();
    }

    private async Task CopyTokenToClipboard(string? token)
    {
        if (string.IsNullOrWhiteSpace(token))
        {
            Snackbar.Add("Couldn't copy token to clipboard", Severity.Error);
            return;
        }

        await ClipboardService.CopyToClipboard(token);
        Snackbar.Add("Copied token to clipboard", Severity.Info);
    }

    private void LogOut()
    {
        Dispatcher.Dispatch(new UserAgentLogout());
    }

}