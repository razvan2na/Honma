@attribute [Route($"{Routes.Ships}/{{shipSymbol}}")]
@inherits FluxorComponent

<MudContainer MaxWidth="MaxWidth.Large">
    @if (State.Value.Ship is not null)
    {
        var ship = State.Value.Ship.Value;

        <MudStack class="height-full">
            <AppSurface>
                <MudStack AlignItems="AlignItems.Center"
                          Justify="Justify.SpaceBetween"
                          Row>
                    <MudStack AlignItems="AlignItems.Center"
                              Row
                              Spacing="2">
                        <MudIcon Icon="@HonmaIcons.Ship"
                                 Size="Size.Large"/>
                        <MudText Typo="Typo.h4">
                            <b>@ship.Registration.Name</b>
                        </MudText>
                    </MudStack>

                    <MudStack Row
                              Spacing="1">
                        <MudChip Color="Color.Secondary"
                                 T="string"
                                 Variant="Variant.Text">
                            @ship.Registration.Role
                        </MudChip>
                        <MudChip Color="Color.Primary"
                                 T="string"
                                 Variant="Variant.Text">
                            @ship.Registration.FactionSymbol
                        </MudChip>
                    </MudStack>
                </MudStack>

                <AppSurface Class="mt-4"
                            Light>
                    <MudStack Justify="Justify.SpaceBetween"
                              Row>
                        <MudStack Row
                                  Spacing="8">
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.subtitle2">Status</MudText>
                                <MudText Typo="Typo.h6">@ship.Nav.Status.Replace('_', ' ')</MudText>
                            </MudStack>

                            <MudStack Spacing="0">
                                <MudText Typo="Typo.subtitle2">System</MudText>
                                <MudLink Href="@($"{Routes.Systems}/{ship.Nav.SystemSymbol}")"
                                         Typo="Typo.h6">
                                    @ship.Nav.SystemSymbol
                                </MudLink>
                            </MudStack>

                            <MudStack Spacing="0">
                                <MudText Typo="Typo.subtitle2">Waypoint</MudText>
                                <MudLink Href="@($"{Routes.Systems}/{ship.Nav.SystemSymbol}{Routes.Waypoints}/{ship.Nav.WaypointSymbol}")"
                                         Typo="Typo.h6">
                                    @ship.Nav.WaypointSymbol
                                </MudLink>
                                <MudText Typo="Typo.body2">@ship.Nav.Route.Origin.Type</MudText>
                            </MudStack>
                        </MudStack>

                        <MudStack Row>
                            <MudStack>
                                @if (ship.Nav.Status == "DOCKED")
                                {
                                    <MudButton OnClick="() => OrbitShip(ship)"
                                               Size="Size.Small"
                                               StartIcon="@HonmaIcons.Orbit"
                                               Variant="Variant.Outlined">
                                        Move to orbit
                                    </MudButton>
                                }
                                else
                                {
                                    <MudButton OnClick="() => DockShip(ship)"
                                               Size="Size.Small"
                                               StartIcon="@HonmaIcons.Orbit"
                                               Variant="Variant.Outlined">
                                        Dock
                                    </MudButton>
                                }

                                <MudButton Disabled="@(ship.Nav.Status != "IN_ORBIT")"
                                           OnClick="async () => await ShowNavigationDialog(ship)"
                                           Size="Size.Small"
                                           StartIcon="@HonmaIcons.Route"
                                           Variant="Variant.Outlined">
                                    Navigate
                                </MudButton>
                            </MudStack>

                            <MudStack>
                                <MudButton Class=""
                                           Disabled
                                           Size="Size.Small"
                                           StartIcon="@HonmaIcons.Jump"
                                           Variant="Variant.Outlined">
                                    Jump
                                </MudButton>
                                <MudButton Disabled
                                           Size="Size.Small"
                                           StartIcon="@HonmaIcons.Warp"
                                           Variant="Variant.Outlined">
                                    Warp
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </AppSurface>

                <MudGrid Class="my-2"
                         Spacing="4">
                    <MudItem xs="3">
                        <StatisticRangeDisplay Icon="@HonmaIcons.Crew"
                                               Max="@ship.Crew.Capacity"
                                               Title="Crew"
                                               Value="@ship.Crew.Current"/>
                    </MudItem>
                    <MudItem xs="3">
                        <StatisticRangeDisplay Icon="@HonmaIcons.MoraleHigh"
                                               Max="100"
                                               Title="Morale"
                                               Value="@ship.Crew.Morale"/>
                    </MudItem>
                    <MudItem xs="3">
                        <StatisticRangeDisplay Icon="@HonmaIcons.Fuel"
                                               Max="@ship.Fuel.Capacity"
                                               Title="Fuel"
                                               Value="@ship.Fuel.Current"/>
                    </MudItem>
                    <MudItem xs="3">
                        <StatisticRangeDisplay Icon="@HonmaIcons.Cargo"
                                               Max="@ship.Cargo.Capacity"
                                               Title="Cargo"
                                               Value="@ship.Cargo.Units"/>
                    </MudItem>
                    <MudItem xs="3">
                        <StatisticRangeDisplay Icon="@HonmaIcons.Module"
                                               Max="@ship.Frame.ModuleSlots"
                                               Title="Modules"
                                               Value="@ship.Modules.Count"/>
                    </MudItem>
                    <MudItem xs="3">
                        <StatisticRangeDisplay Icon="@HonmaIcons.Mount"
                                               Max="@ship.Frame.MountingPoints"
                                               Title="Mounts"
                                               Value="@ship.Mounts.Count"/>
                    </MudItem>
                    <MudItem xs="3">
                        <StatisticRangeDisplay Icon="@HonmaIcons.Power"
                                               Max="@ship.Reactor.PowerOutput"
                                               Title="Power"
                                               Value="@PowerConsumption(ship)"/>
                    </MudItem>
                </MudGrid>
            </AppSurface>

            <AppSurface Padding="0">
                <MudTabs Centered
                         Class="rounded-lg">
                    <MudTabPanel Icon="@HonmaIcons.Loadout"
                                 Text="Loadout">
                        <div class="pa-4">
                            <ShipLoadout Ship="ship"/>
                        </div>
                    </MudTabPanel>
                    <MudTabPanel Disabled="@(ship.Modules.Count == 0)"
                                 Icon="@HonmaIcons.Module"
                                 Text="Modules">
                        <div class="pa-4">
                            <ShipModules Modules="ship.Modules"/>
                        </div>
                    </MudTabPanel>
                    <MudTabPanel Disabled="@(ship.Mounts.Count == 0)"
                                 Icon="@HonmaIcons.Mount"
                                 Text="Mounts">
                        <div class="pa-4">
                            <ShipMounts Mounts="ship.Mounts"/>
                        </div>
                    </MudTabPanel>
                    <MudTabPanel Disabled="@(ship.Cargo.Units == 0)"
                                 Icon="@HonmaIcons.Cargo"
                                 Text="Cargo">
                        <MudTable Class="rounded-lg"
                                  Elevation="0"
                                  Items="ship.Cargo.Inventory">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Description</MudTh>
                                <MudTh>Units</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Name</MudTd>
                                <MudTd>@context.Description</MudTd>
                                <MudTd>@context.Units</MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <MudText>Ship has no cargo</MudText>
                            </NoRecordsContent>
                        </MudTable>
                    </MudTabPanel>
                </MudTabs>
            </AppSurface>
        </MudStack>
    }
</MudContainer>

@code {

    [Parameter] public required string ShipSymbol { get; set; }

    [Inject] public required IState<ShipState> State { get; set; }

    [Inject] public required IDispatcher Dispatcher { get; set; }

    [Inject] public required IDialogService DialogService { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new ShipLoad(ShipSymbol));
    }

    private int PowerConsumption(Ship ship)
    {
        return (ship.Frame.Requirements.Power ?? 0) +
               (ship.Engine.Requirements.Power ?? 0) +
               ship.Modules.Aggregate(0, (total, module) => total + (module.Requirements.Power ?? 0)) +
               ship.Mounts.Aggregate(0, (total, mount) => total + (mount.Requirements.Power ?? 0));
    }

    private void OrbitShip(Ship ship)
    {
        Dispatcher.Dispatch(new ShipOrbit(ship.Symbol));
    }

    private void DockShip(Ship ship)
    {
        Dispatcher.Dispatch(new ShipDock(ship.Symbol));
    }

    private async Task ShowNavigationDialog(Ship ship)
    {
        var parameters = new DialogParameters<NavigateShipDialog>
        {
            { x => x.Ship, ship }
        };
        var options = new DialogOptions
        {
            FullWidth = true,
            BackgroundClass = "dialog-background"
        };

        var dialog = await DialogService.ShowAsync<NavigateShipDialog>("Navigate ship", parameters, options);
        var result = await dialog.Result;
    }

}