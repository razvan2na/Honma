@attribute [Route($"{Routes.Systems}/{{systemSymbol}}{Routes.Waypoints}/{{waypointSymbol}}")]
@inherits FluxorComponent

<MudContainer MaxWidth="MaxWidth.Small">
    @if (State.Value.Waypoint is not null)
    {
        var waypoint = State.Value.Waypoint.Value;

        <MudPaper Class="my-4 pa-4 rounded-lg"
                  Elevation="2">
            <MudText Typo="Typo.h5">@WaypointSymbol</MudText>

            <MudText>@waypoint.Type</MudText>

            @foreach (var trait in waypoint.Traits)
            {
                <MudChip T="string">@trait.Name</MudChip>
            }
        </MudPaper>

        <MudPaper Class="mb-4 rounded-lg"
                  Elevation="2">
            <MudTabs Centered>
                <MudTabPanel Disabled="@(waypoint.Traits.All(trait => trait.Symbol != WaypointTraitSymbol.Marketplace.ToString().ToMacroCase()))"
                             Icon="@HonmaIcons.Market"
                             Text="Market">

                </MudTabPanel>

                <MudTabPanel Disabled="@(waypoint.Traits.All(trait => trait.Symbol != WaypointTraitSymbol.Shipyard.ToString().ToMacroCase()))"
                             Icon="@HonmaIcons.Shipyard"
                             Text="Shipyard">
                    @if (State.Value.Shipyard is not null)
                    {
                        <ShipyardDisplay Shipyard="State.Value.Shipyard.Value"/>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    }
</MudContainer>

@code {

    [Parameter] public required string SystemSymbol { get; set; }

    [Parameter] public required string WaypointSymbol { get; set; }

    [Inject] public required IState<WaypointState> State { get; set; }

    [Inject] public required IDispatcher Dispatcher { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new WaypointLoad(SystemSymbol, WaypointSymbol));
    }

}