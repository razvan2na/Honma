@if (_value != 0)
{
    <MudStack AlignItems="AlignItems.Center"
              Row
              Spacing="1">
        <MudText Typo="Typo.subtitle2">
            @(_showPlus ? "+" : "")
            @_value
        </MudText>
        <MudIcon Icon="@HonmaIcons.Specification[Specification]"
                 Size="Size.Small"/>
        @if (ShowText)
        {
            <MudText Typo="Typo.subtitle2">@(Specification.ToString().ToNaturalLanguage())</MudText>
        }
    </MudStack>
}

@code {

    [Parameter] public required ShipPart Part { get; set; }

    [Parameter] public required ShipPartSpecification Specification { get; set; }

    [Parameter] public bool ShowText { get; set; }

    private int _value;
    private bool _showPlus;

    protected override void OnParametersSet()
    {
        _value = Specification switch
        {
            ShipPartSpecification.FuelCapacity => Part.IsFrame ? Part.Frame.FuelCapacity : default,
            ShipPartSpecification.ModuleSlots => Part.IsFrame ? Part.Frame.ModuleSlots : default,
            ShipPartSpecification.MountingPoints => Part.IsFrame ? Part.Frame.MountingPoints : default,
            ShipPartSpecification.PowerOutput => Part.IsReactor ? Part.Reactor.PowerOutput : default,
            ShipPartSpecification.Speed => Part.IsEngine ? Part.Engine.Speed : default,
            ShipPartSpecification.Capacity => Part.IsModule ? Part.Module.Capacity ?? 0 : default,
            ShipPartSpecification.Range => Part.IsModule ? Part.Module.Range ?? 0 : default,
            ShipPartSpecification.Strength => Part.IsMount ? Part.Mount.Strength ?? 0 : default,
            _ => throw new ArgumentOutOfRangeException()
        };

        _showPlus = Specification == ShipPartSpecification.Capacity;
    }

}