@attribute [Route(Routes.Ships)]
@inherits FluxorComponent

<MudGrid Spacing="4">
    <MudItem Class="mt-2"
             xs="3">
        <ShipList SelectedShip="_selectedShip"
                  SelectedShipChanged="@(ship => { if (ship?.Symbol == null) { return; } LoadShip(ship.Value); _selectedShip = ship; })"
                  Ships="State.Value.Ships"/>

        @if (State.Value.Pagination.Total / _pageSize > 1)
        {
            <MudPagination @bind-Selected="_page"
                           Class="mt-4"
                           Count="State.Value.Pagination.Total / _pageSize">
            </MudPagination>
        }
    </MudItem>

    <MudItem Class="height-screen mt-2"
             xs="9">
        @if (_selectedShip is null)
        {
            <MudPaper Class="height-full rounded-lg"
                      Elevation="0">
                <MudStack AlignItems="AlignItems.Center"
                          Class="height-full"
                          Justify="Justify.Center">
                    <MudText>Select a ship from the list to view its details</MudText>
                </MudStack>
            </MudPaper>
        }
        else
        {
            <ShipDetails/>
        }
    </MudItem>
</MudGrid>

@code {

    [Inject] public required IState<ShipState> State { get; set; }

    [Inject] public required IDispatcher Dispatcher { get; set; }

    private int _page = 1;
    private int _pageSize = 10;
    private Ship? _selectedShip;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new ShipsLoad(_pageSize, _page));
    }

    private void LoadShip(Ship ship)
    {
        Dispatcher.Dispatch(new ShipUpdated(ship));
    }

}