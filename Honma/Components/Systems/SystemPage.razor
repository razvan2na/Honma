@attribute [Route($"{Routes.Systems}/{{systemSymbol}}")]
@inherits FluxorComponent

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="mt-4 pa-4 rounded-lg"
              Elevation="2">
        <MudStack AlignItems="AlignItems.Center"
                  Row
                  Spacing="2">
            <MudIcon Icon="@HonmaIcons.System"/>
            <MudText Typo="Typo.h5">@SystemSymbol</MudText>
        </MudStack>

        @if (State.Value.System is not null)
        {
            var system = State.Value.System.Value;
        }
    </MudPaper>

    <MudPaper Class="mt-4 pa-4 rounded-lg"
              Elevation="2">
        <MudStack AlignItems="AlignItems.Center"
                  Justify="Justify.SpaceBetween"
                  Row>
            <MudStack AlignItems="AlignItems.Center"
                      Row
                      Spacing="2">
                <MudIcon Icon="@HonmaIcons.Waypoint"/>
                <MudText Typo="Typo.h6">Waypoints</MudText>
            </MudStack>
            <MudPagination BoundaryCount="1"
                           Count="@(State.Value.TotalWaypoints / 10 + 1)"
                           MiddleCount="3"
                           Rectangular
                           Selected="_page"
                           SelectedChanged="WaypointPageChange"
                           Size="Size.Small"
                           Variant="Variant.Text"/>
        </MudStack>

        <MudList Class="mt-4"
                 Gutters="false"
                 T="string">
            @foreach (var waypoint in State.Value.Waypoints)
            {
                <MudListItem Class="rounded-lg"
                             Href="@($"{Routes.Systems}/{SystemSymbol}{Routes.Waypoints}/{waypoint.Symbol}")"
                             T="string">
                    <ChildContent>
                        <MudStack AlignItems="AlignItems.Center"
                                  Justify="Justify.SpaceBetween"
                                  Row>
                            <MudStack AlignItems="AlignItems.Center"
                                      Justify="Justify.SpaceBetween"
                                      Row Class="width-full">
                                <MudText>@waypoint.Symbol</MudText>
                                <MudStack AlignItems="AlignItems.Center"
                                          Row>
                                    @if (waypoint.Traits.Any(trait => trait.Symbol == WaypointTraitSymbol.Marketplace.ToString().ToMacroCase()))
                                    {
                                        <MudChip Color="Color.Primary"
                                                 Size="Size.Small"
                                                 T="string"
                                                 Variant="Variant.Text">
                                            Market
                                        </MudChip>
                                    }

                                    @if (waypoint.Traits.Any(trait => trait.Symbol == WaypointTraitSymbol.Shipyard.ToString().ToMacroCase()))
                                    {
                                        <MudChip Color="Color.Secondary"
                                                 Size="Size.Small"
                                                 T="string"
                                                 Variant="Variant.Text">
                                            Shipyard
                                        </MudChip>
                                    }

                                    @if (waypoint.Traits.Any(trait => trait.Symbol == WaypointTraitSymbol.Uncharted.ToString().ToMacroCase()))
                                    {
                                        <MudChip Size="Size.Small"
                                                 T="string"
                                                 Variant="Variant.Text">
                                            Uncharted
                                        </MudChip>
                                    }
                                </MudStack>
                            </MudStack>

                            <MudIcon Icon="@HonmaIcons.CaretRight"
                                     Size="Size.Small"/>
                        </MudStack>
                    </ChildContent>
                </MudListItem>
            }
        </MudList>
    </MudPaper>
</MudContainer>

@code {

    [Parameter] public required string SystemSymbol { get; set; }

    [Inject] public required IState<SystemState> State { get; set; }

    [Inject] public required IDispatcher Dispatcher { get; set; }

    private int _page = 1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new SystemLoad(SystemSymbol));
        Dispatcher.Dispatch(new SystemWaypointsLoad(SystemSymbol, _page, null, null));
    }

    private void WaypointPageChange(int page)
    {
        _page = page;
        Dispatcher.Dispatch(new SystemWaypointsLoad(SystemSymbol, _page, null, null));
    }

}